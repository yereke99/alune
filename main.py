#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from load import bot, dp
from aiogram import types
from FormaAdmin import *
from keyboard import*
from database import*
from config import*
from Forma import*
import asyncio
from traits import*
import time
from FormaAdmin import*
from aiogram.types import InputMediaPhoto, InputMediaVideo
import os

generator = Generator()
btn = Button()
db = Database()



@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def pdf_received_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî —ç—Ç–æ PDF
    if message.document.mime_type == 'application/pdf':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Forma.s2
        await Forma.s2.set()
        async with state.proxy() as data:
            data['count'] = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "“ö–∞–π—Ç–∞–¥–∞–Ω –∫–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"
        await bot.send_message(
            message.from_user.id,
            text="*–°—ñ–∑–¥—ñ“£ —á–µ–≥—ñ“£—ñ–∑ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ.üòâüëå*",
            parse_mode="Markdown",
        )
    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ PDF-—Ñ–∞–π–ª, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–¢–µ–∫, PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫!")
    


@dp.message_handler(commands=['admin'])
async def handler(message: types.Message):
    print(message.from_user.id)
    

    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )
        

@dp.message_handler(Text(equals="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in {admin, admin2, admin3}:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tik_tok_count = db.get_tiktok_count()
        instagram_count = db.get_instagram_count()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üîπ TikTok: {tik_tok_count} –∑–∞—Ö–æ–¥–æ–≤\n"
            f"üîπ Instagram: {instagram_count} –∑–∞—Ö–æ–¥–æ–≤\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply(stats_message, parse_mode="HTML")

@dp.message_handler(commands=['start', 'go'])
async def start_handler(message: types.Message):
    
    args = message.get_args()

    if args == "TikTok":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è TikTok
        db.tiktok_counter()
        await Forma.s1.set()
        await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∞ –∂–∏–Ω–∞“õ –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        ) 
        return
    elif args == "Instagram":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è Instagram
        db.instagram_counter()
        await Forma.s1.set()
        await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∞ –∂–∏–Ω–∞“õ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        )
        return 

    print(message.from_user.id)

    from datetime import datetime
    fileId = "AgACAgIAAxkBAAMEZ12dAAFvprcfkSLlfunyQiNcAAHC5gACLeYxGxZu8UqeVspKQ5ihVgEAAwIAA3kAAzYE"

    user_id = message.from_user.id
    user_name = f"@{message.from_user.username}"
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    db.JustInsert(user_id, user_name, time_now)  
    
    if db.CheckUserPaid(message.from_user.id) == True:
        await bot.send_photo(
            message.from_user.id,
            fileId,
            caption="""*–°”ô–ª–µ–µ–µ–ºüòç

1. ”ò–ª–µ–º–¥—ñ–∫ –±—Ä–µ–Ω–¥ ALUNE –ª—é–∫—Å —Å–∞–ø–∞–¥–∞“ì—ã –∫–æ—Å–º–µ—Ç–∏–∫–∞ –Ω–∞–±–æ—Ä—ã–Ω 40 000 —Ç–µ“£–≥–µ–≥–µ –∞–ª—É –∞—Ä“õ—ã–ª—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —Å—ñ–∑ –ê–õ–ú–ê–¢–´ “õ–∞–ª–∞—Å—ã–Ω–¥–∞“ì—ã 150.000.000 —Ç–µ“£–≥–µ–ª—ñ–∫ 2 —ç—Ç–∞–∂–¥—ã –∫–æ—Ç—Ç–µ–∂–¥—ñ“£ –∂”ô–Ω–µ ”ô—Ä—Ç“Ø—Ä–ª—ñ “õ“±–Ω–¥—ã, –±—Ä–µ–Ω–¥ –∑–∞—Ç—Ç–∞—Ä–¥—ã“£ –∏–µ—Å—ñ –∞—Ç–∞–Ω–∞—Å—ã–∑ ‚ù§Ô∏è

2. –°—Å—ã–ª–∫–∞ –±–µ—Ä—ñ–ª–µ–¥—ñ —Å–∞–π—Ç—Ç—ã“£
3. –î–æ–≥–æ–≤–æ—Ä-–æ—Ñ–µ—Ä—Ç–∞–º–µ–Ω —Ç–∞–Ω—ã—Å—É—ã“£—ã–∑–¥—ã —Å“±—Ä–∞–π–º—ã–∑! –¢–∞–Ω—ã—Å—ã–ø –±–æ–ª“ì–∞–Ω —Å–æ“£ –∞—Ä—ã “õ–∞—Ä–∞–π –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω ‚Äú—Ç–∞–Ω—ã—Å—Ç—ã–º‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑*""",
            parse_mode="Markdown",
            protect_content=True,
            reply_markup=btn.menu(),
        )
        return

    await bot.send_photo(
        message.from_user.id,
        fileId,
        caption="""*–°”ô–ª–µ–µ–µ–ºüòç

1. ”ò–ª–µ–º–¥—ñ–∫ –±—Ä–µ–Ω–¥ ALUNE –ª—é–∫—Å —Å–∞–ø–∞–¥–∞“ì—ã –∫–æ—Å–º–µ—Ç–∏–∫–∞ –Ω–∞–±–æ—Ä—ã–Ω 40 000 —Ç–µ“£–≥–µ–≥–µ –∞–ª—É –∞—Ä“õ—ã–ª—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —Å—ñ–∑ –ê–õ–ú–ê–¢–´ “õ–∞–ª–∞—Å—ã–Ω–¥–∞“ì—ã 150.000.000 —Ç–µ“£–≥–µ–ª—ñ–∫ 2 —ç—Ç–∞–∂–¥—ã –∫–æ—Ç—Ç–µ–∂–¥—ñ“£ –∂”ô–Ω–µ ”ô—Ä—Ç“Ø—Ä–ª—ñ “õ“±–Ω–¥—ã, –±—Ä–µ–Ω–¥ –∑–∞—Ç—Ç–∞—Ä–¥—ã“£ –∏–µ—Å—ñ –∞—Ç–∞–Ω–∞—Å—ã–∑ ‚ù§Ô∏è

2. –°—Å—ã–ª–∫–∞ –±–µ—Ä—ñ–ª–µ–¥—ñ —Å–∞–π—Ç—Ç—ã“£
3. –î–æ–≥–æ–≤–æ—Ä-–æ—Ñ–µ—Ä—Ç–∞–º–µ–Ω —Ç–∞–Ω—ã—Å—É—ã“£—ã–∑–¥—ã —Å“±—Ä–∞–π–º—ã–∑! –¢–∞–Ω—ã—Å—ã–ø –±–æ–ª“ì–∞–Ω —Å–æ“£ –∞—Ä—ã “õ–∞—Ä–∞–π –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É “Ø—à—ñ–Ω ‚Äú—Ç–∞–Ω—ã—Å—Ç—ã–º‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑*""",        
        parse_mode="Markdown",
        protect_content=True,
        reply_markup=btn.buy_cosmetic(),
    )


@dp.callback_query_handler(lambda c: c.data == "buy_cosmetics")
async def process_buy_cinema(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    await bot.answer_callback_query(callback_query.id)
    
    await Forma.s1.set()

    await bot.send_message(
        callback_query.from_user.id,
        text="*“ö–∞–Ω—à–∞ üíã –∫–æ—Å–º–µ—Ç–∏–∫–∞ –∂–∏—ã–Ω—Ç—ã“õ –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ö–æ—Å–º–µ—Ç–∏–∫–∞ —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
        parse_mode="Markdown",
        reply_markup=btn.digits_and_cancel()
    ) 

# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF-—Ñ–∞–π–ª–∞
@dp.message_handler(content_types=types.ContentType.DOCUMENT, state='*')
async def pdf_received_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî —ç—Ç–æ PDF
    if message.document.mime_type == 'application/pdf':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Forma.s1
        await Forma.s1.set()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "“ö–∞–π—Ç–∞–¥–∞–Ω –∫–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"
        await bot.send_message(
            message.from_user.id,
            text="*–ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω –∂“Ø–ª–¥–µ–Ω—ñ “±—Ç—É üìà —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã —Å–æ“ì—ã—Ä–ª—ã–º –∂–æ“ì–∞—Ä—ã üòâüëå*",
            parse_mode="Markdown",
        )
        await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        )
    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ PDF-—Ñ–∞–π–ª, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–¢–µ–∫, PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫!")
   

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO])
async def media_handler(message: types.Message, state: FSMContext):
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.content_type == 'photo':
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤–∏–¥–µ–æ
        file_id = message.video.file_id

    if file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['file_id'] = file_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.from_user.id,
            text=f"*FileID: {data['file_id']}*",
            parse_mode="Markdown",
        )
    else:
        await bot.send_message(
            message.from_user.id,
            text="–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.",
        ) 

@dp.message_handler(Text(equals="üí∏ Money"), content_types=['text'])
async def handler(message: types.Message):
    
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        sum = db.get_money_sum()
        await bot.send_message(
                message.from_user.id,
                text="""*üí≥ –ñ–∞–ª–ø—ã “õ–∞—Ä–∞–∂–∞—Ç: %d*"""%sum,
                parse_mode="Markdown",
                reply_markup=btn.admin()
            )    

@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await FormaAdmin.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="""*‚úèÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∏–ø—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*""",
                parse_mode="Markdown",
                reply_markup=btn.typeMsg()
            )     


@dp.message_handler(Text(equals="üì® ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker*\n\nhttps://wa.me/77079555760""",
        parse_mode="Markdown",
    ) 

@dp.message_handler(Text(equals="üìë –õ–æ—Ç–æ"), content_types=['text'])
async def send_just_excel(message: types.Message):
    if message.from_user.id == admin:
        db.create_loto_excel('./excell/loto.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/loto.xlsx', 'rb'))

@dp.message_handler(Text(equals="üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"), content_types=['text'])
async def send_client_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        db.create_client_excel('./excell/clients.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/clients.xlsx', 'rb'))

@dp.message_handler(Text(equals="üëá Just Clicked"), content_types=['text'])
async def send_loto_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        db.create_just_excel('./excell/just_users.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/just_users.xlsx', 'rb'))
    


@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    ) 


@dp.message_handler(Text(equals="üßß “∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º"), content_types=['text'])
async def handler(message: types.Message):

    id_user = message.from_user.id            # Get the user ID from the message
    loto_ids = db.FetchIdLotoByUser(id_user)  # Fetch the list of id_loto for this user
    
    if loto_ids:
        ids_formatted = ", ".join(map(str, loto_ids))  # Format the list as a comma-separated string
        response_text = f"–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ“£ ID-–ª–∞—Ä—ã: {ids_formatted}"
    else:
        response_text = "–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—ñ“£—ñ–∑ –∂–æ“õ."

    await bot.send_message(
        message.from_user.id,
        text=response_text,
        parse_mode="Markdown",
        reply_markup=btn.menu()
    )

@dp.message_handler(Text(equals="‚óÄÔ∏è –ö–µ—Ä—ñ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id == admin or message.from_user.id == admin2:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

async def send_pdf_with_caption(user_id, id_loto, caption):
    loto_info = db.fetch_loto_by_id(id_loto)
    if not loto_info:
        await bot.send_message(user_id, text="PDF not found.")
        return

    receipt = loto_info[3]  # Adjusted index for receipt column
    pdf_path = f"/home/cinema/pdf/{receipt}"
    
    if os.path.exists(pdf_path):
        await bot.send_document(
            user_id,
            document=open(pdf_path, 'rb'),
            caption=caption,
            reply_markup=btn.gift()
        )
    else:
        await bot.send_message(user_id, text="PDF file not found.")


from aiogram.types import InputFile


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
def find_pdf_file(file_name: str) -> str:
    directories = ["/home/clone/pdf/", "/home/movie-alish/pdf/", "/home/movie/pdf/"]
    for directory in directories:
        file_path = os.path.join(directory, file_name)
        if os.path.exists(file_path):
            return file_path
    return None

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID
@dp.message_handler(content_types=['text'])
async def handle_gift_car_request(message: types.Message):
    user_input = message.text.strip()

    try:
        # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        requested_id = int(user_input)

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ receipt –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ id_loto
        receipt = db.get_receipt_by_id(requested_id)
        print(receipt)
        
        if not receipt:
            await message.reply("–§–∞–π–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        file_name = f"{receipt}"
        file_path = find_pdf_file(file_name)

        if file_path:
            await message.reply_document(InputFile(file_path))
        else:
            await message.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.")
    
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")